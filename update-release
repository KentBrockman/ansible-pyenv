#!/usr/bin/env bash

###
# Print error into STDERR
###
error() {
    echo "$@" 1>&2
}

###
# Get latest release for a GitHub repository
###
get_latest_release() {
    local repository=$1
    local url="https://api.github.com/repos/${repository}/releases/latest"
    if [ -n "$GITHUB_OAUTH_TOKEN" ]; then
        url="${url}?access_token=${GITHUB_OAUTH_TOKEN}"
    fi
    if test "$(uname)" = "Darwin"; then
        curl --silent "${url}" |
            grep '"tag_name":' |
            sed -E 's/.*"([^"]+)".*/\1/'
    else
        curl --silent "${url}" |
            grep '"tag_name":' |
            sed -r 's/.*"([^"]+)".*/\1/'
    fi
}

###
# Update pyenv version
###
update_pyenv_version() {
    local version=$1
    update_variable "pyenv_version" "${version}"
}

###
# Update pyenv-virtualenv version
###
update_pyenv_virtualenv_version() {
    local version=$1
    update_variable "pyenv_virtualenv_version" "${version}"
}

###
# Update Ansible variable
###
update_variable() {
    local key=$1
    local value=$2
    local file=defaults/main.yml
    if test "$(uname)" = "Darwin"; then
        sed -i.save -E "s/^($key):.*$/\1: \"${value}\"/" \
            ${file}
    else
        sed -i.save -r "s/^($key):.*$/\1: \"${version}\"/" \
            ${file}
    fi
    rm ${file}.save
}

###
# Get latest pyenv version
###
latest_pyenv_version() {
    local latest_release=""
    local errmsg="Failed to get latest pyenv/pyenv release"
    latest_release=$(get_latest_release pyenv/pyenv)
    [ -z "${latest_release}" ] && {
        error "${errmsg}"
        return 1
    }
    echo "${latest_release}"
}

###
# Get latest pyenv-virtualenv version
###
latest_pyenv_virtualenv_version() {
    local latest_release=""
    local errmsg="Failed to get latest pyenv/pyenv-virtualenv release"
    latest_release=$(get_latest_release pyenv/pyenv-virtualenv)
    [ -z "${latest_release}" ] && {
        error "${errmsg}"
        return 1
    }
    echo "${latest_release}"
}

###
# Update all versions
###
update_versions() {
    local repository=$1
    if [ -z "${repository}" ]; then
        error "Repository not defined"
        exit 1
    fi
    if [ "${repository}" == "pyenv" ]; then
        local pyenv_version
        pyenv_version=$(latest_pyenv_version)
        echo "Latest pyenv release is ${pyenv_version}"
        update_pyenv_version "${pyenv_version}"
    elif [ "${repository}" == "pyenv-virtualenv" ]; then
        local pyenv_virtualenv_version
        pyenv_virtualenv_version=$(latest_pyenv_virtualenv_version)
        echo "Latest pyenv-virtualenv release is ${pyenv_virtualenv_version}"
        update_pyenv_virtualenv_version "${pyenv_virtualenv_version}"
    else
        error "Unknown repository: ${repository}"
        exit 1
    fi
}

check_requirements() {
    command -v curl >/dev/null || {
        error "curl is not installed"
        exit 1
    }
}

set -e

check_requirements
update_versions "$1"
