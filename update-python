#!/usr/bin/env bash

# Print error into STDERR
error() {
    echo "$@" 1>&2
}

# Get latest stable tag for a GitHub repository
get_latest_cpython_version() {
    local target_version=$1
    local repository=python/cpython
    local url="https://api.github.com/repos/${repository}/git/refs/tags"
    if [ -n "$GITHUB_OAUTH_TOKEN" ]; then
        url="${url}?access_token=${GITHUB_OAUTH_TOKEN}"
    fi
    # @formatter:off
    curl --silent "${url}" |
        jq --arg version_tag "${target_version}" \
            -r 'map(select(.object.type == "tag"))
            | map(select(.ref | test("refs/tags/" + $version_tag)))
            | map(select(.ref | test("rc") | not))
            | map(.ref)
            | map(capture("refs/tags/v(?<version>.*)"))
            | sort_by(.version) | last | .version'
    # @formatter:on
}

# Get latest stable tag for a GitHub repository
get_latest_python27_version() {
    get_latest_cpython_version "v2.7"
}

# Get latest stable tag for a GitHub repository
get_latest_python37_version() {
    get_latest_cpython_version "v3.7"
}

# Update Ansible variable
update_python2_version() {
    local key=pyenv_python2_version
    local version=$1
    local file=defaults/main.yml
    if test "$(uname)" = "Darwin"; then
        sed -i.save -E "s/^($key):.*$/\1: \"${version}\"/" \
            ${file}
    else
        sed -i.save -r "s/^($key):.*$/\1: \"${version}\"/" \
            ${file}
    fi
    rm ${file}.save
}

# Update Ansible variable
update_python3_version() {
    local key=pyenv_python3_version
    local version=$1
    local file=defaults/main.yml
    if test "$(uname)" = "Darwin"; then
        sed -i.save -E "s/^($key):.*$/\1: \"${version}\"/" \
            ${file}
    else
        sed -i.save -r "s/^($key):.*$/\1: \"${version}\"/" \
            ${file}
    fi
    rm ${file}.save
}

# Update all versions
update_versions() {
    local target=$1
    if [ -z "${target}" ]; then
        error "Target version not defined"
        exit 1
    fi
    if [ "${target}" == "python2" ]; then
        update_python2
    elif [ "${target}" == "python3" ]; then
        update_python3
    else
        error "Unknown target version: ${target}"
        exit 1
    fi
}

# Update Python 2 version
update_python2() {
    PYTHON27_VERSION=$(get_latest_python27_version)
    echo "Latest Python 2.7 release is ${PYTHON27_VERSION}"
    update_python2_version "${PYTHON27_VERSION}"
}

# Update Python 3 version
update_python3() {
    PYTHON37_VERSION=$(get_latest_python37_version)
    echo "Latest Python 3.7 release is ${PYTHON37_VERSION}"
    update_python3_version "${PYTHON37_VERSION}"
}

check_requirements() {
    command -v curl >/dev/null || {
        error "curl is not installed"
        exit 1
    }
    command -v jq >/dev/null || {
        error "jq not installed"
        exit 1
    }
}

set -e

check_requirements
update_versions "$1"
